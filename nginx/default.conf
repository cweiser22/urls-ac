upstream backend {
    server app:8080;
    keepalive 64;  # Reuse TCP connections
}

# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name _;

    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl;
    server_name _;

    ssl_certificate     /etc/ssl/urls_ac_ecdsa.crt;
    ssl_certificate_key /etc/ssl/urls_ac_ecdsa.key;

    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Serve SPA static files under /ui/static/*
    location /ui/static/ {
        alias /var/www/urls-ac-frontend/;
        access_log off;
        expires 1y;
        add_header Cache-Control "public";
    }

    location /ads.txt/ {
            root /var/www/urls-ac-frontend/;
            try_files /ads.txt =404;
            add_header Content-Type text/plain;
            access_log off;
            expires 1y;
            add_header Cache-Control "public";
        }

    # Serve SPA index.html only for the exact /
    location = / {
        root /var/www/urls-ac-frontend;
        index index.html;
        try_files /index.html =404;
    }

    # Everything else goes to the backend (shortener, API, etc.)
    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
    }
}
